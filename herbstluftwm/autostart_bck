# this is a simple config for herbstluftwm
hc() {
    herbstclient "$@"
}

hc emit_hook reload


# remove all existing keybindings
hc keyunbind --all

# keybindings
# if you have a super key you will be much happier with Mod set to Mod4
Mod=Mod4
#Mod=Mod4   # Use the super key as the main modifier

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-q close_and_remove
hc keybind $Mod-Return spawn kitty # use your $TERMINAL with xterm as fallback
hc keybind $Mod-Tab spawn rofi -show combi
hc keybind XF86MonBrightnessUp spawn light -A 10
hc keybind XF86MonBrightnessDown spawn light -U 10
hc keybind XF86AudioRaiseVolume spawn pamixer -i 5 && paplay /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga
# Lower Volume
hc keybind XF86AudioLowerVolume spawn pamixer -d 5 && paplay /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga
hc keybind XF86AudioMute spawn pamixer -t # Toggle muting
hc keybind $Mod-b spawn chromium
hc keybind $Mod-r spawn kitty vifm
hc keybind $Mod-z spawn MellowPlayer
hc keybind $Mod-Shift-x spawn ~/.config/i3/0x0 area
hc keybind $Mod-Shift-c spawn ~/.config/i3/0x0 text
hc keybind $Mod-Shift-t spawn ~/Documents/dev/py/Threatron/scripts/simplewatch
# basic movement
# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# AUTO START ----------------------------
hc set focus_follows_mouse 1
hc spawn discord &
hc spawn nitrogen --restore &
hc spawn dunst &
hc spawn sh ~/Documents/dev/py/Threatron/pollingservice
hc spawn redshift -O 3100
hc spawn compton --inactive-dim 0.2 &
hc spawn xdo lower -N Polybar &
hc spawn xinput --set-prop 9 'libinput Accel Speed' 1 &
hc spawn MellowPlayer &
#-----------------------------------
# moving clients
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right
hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-s       split   bottom  0.5
hc keybind $Mod-Shift-s split 	bottom	0.8
hc keybind $Mod-d       split   right   0.5
hc keybind $Mod-Shift-d split	right	0.8
hc keybind $Mod-a	split	left	0.5
hc keybind $Mod-Shift-a split	left	0.8
hc keybind $Mod-w	split	top	0.5
hc keybind $Mod-Shift-w split	top	0.8
# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames
resizestep=0.05
hc keybind $Mod-Control-h       resize left +$resizestep
hc keybind $Mod-Control-j       resize down +$resizestep
hc keybind $Mod-Control-k       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# tags
tag_names=( {1..9} )
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done
# MY WEIRD MULTI-monitor SETUP
# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layouting
hc keybind $Mod-control-r remove
hc keybind $Mod-f floating toggle
hc keybind $Mod-Shift-f fullscreen toggle
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-c cycle
hc keybind $Mod-i jumpto urgent

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set frame_border_active_color '#3b4252'
hc set frame_border_normal_color '#2e3440'
hc set frame_bg_normal_color '#2e3440'
hc set frame_bg_active_color '#d8dee9'
hc set frame_border_width 0
hc set always_show_frame 0
hc set frame_bg_transparent 1
hc set frame_transparent_width 1
hc set frame_gap 10

hc attr theme.active.color '#d8dee9'
hc attr theme.normal.color '#2e3440'
hc attr theme.urgent.color red
hc attr theme.inner_width 0
hc attr theme.inner_color black
hc attr theme.border_width 1
hc attr theme.floating.border_width 1
hc attr theme.floating.outer_width 0
hc attr theme.floating.outer_color black
hc attr theme.active.inner_color '#2e3440'
hc attr theme.active.outer_color '#2e3440'
hc attr theme.background_color '#2e3440'

hc set window_gap 0
hc set frame_padding 0
hc set smart_window_surroundings 0
hc set smart_frame_surroundings 1
hc set mouse_recenter_gap 1

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
hc set tree_style '╾│ ├└╼─┐'
# CUSTOM RULES ________________
hc rule focus=on # normally focus new clients
hc rule class="mpv" tag=9
hc rule class="discord" tag=4
hc rules class="MellowPlayer" tag=4



# STUFF TO DO
hc focus_crosses_monitor_boundaries 1
hc set smart_frame_surroundings 1
hc set smart_window_surroundings 1
hc focus_follows_mouse 1
hc detect_monitors
# unlock, just to be sure
hc unlock

# do multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
# hc detect_monitors
# find the panel
# add an external panel
{
    pids=( )
    # reserve some space for the panel on monitor 0
    hc pad 0 31
    # start the panel itself and remember its pid
    polybar bspwm &
    pids+=( $! )
    # or start another panel:
    # mypanel &
    # pids+=( $! )
    # wait until the panels should be stopped
    herbstclient -w '(quit_panel|reload)'
    # stopp all started panels
    kill ${pids[@]}
} &
# Replace the default section for tags in your autostart by the following:
# This is the default tag section of the autostart, with a single change:
# In the use_index keybinding, check the presence of the my_monitor attribute,
# before focusing the desired tag.
hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        # first check if the tag is locked to some monitor.
        # if so, first focus the monitor
        hc keybind "$Mod-$key" \
            chain , silent substitute M tags."$i".my_monitor \
                        focus_monitor M \
                  , use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done

# Add a keybinding for locking the current tag to the monitor it is displayed
# on. This is done by safing the current monitor index in the my_monitor
# attribute of the focused tag. If the monitor has a (nonempty) name, use the
# monitor name instead of its index.
herbstclient keybind $Mod-t chain \
    , new_attr string tags.focus.my_monitor \
    , substitute M monitors.focus.index set_attr tags.focus.my_monitor M \
    , try and \
        . compare monitors.focus.name != "" \
        . substitute M monitors.focus.name \
                set_attr tags.focus.my_monitor M

# Add a keybinding for removing the lock
herbstclient keybind $Mod-Shift-n \
    remove_attr tags.focus.my_monitor

# Statically define which tag should be send to which monitor
lock_tag_to_monitor() {
    herbstclient chain \
        , new_attr string tags.by-name."$1".my_monitor \
        , set_attr tags.by-name."$1".my_monitor "$2"
}
# Already lock some of the tags to a monitor, for example:
# lock the second tag to the monitor with index 0
lock_tag_to_monitor 2 1
lock_tag_to_monitor 9 2
lock_tag_to_monitor 1 0
lock_tag_to_monitor 3 0
lock_tag_to_monitor 4 0
lock_tag_to_monitor 5 0
lock_tag_to_monitor 6 0
lock_tag_to_monitor 7 1
lock_tag_to_monitor 8 0
